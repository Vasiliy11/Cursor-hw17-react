{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","startTimer","timerID","setInterval","setState","time","state","step","progressBar","clearInterval","button","stopTimer","startStopToggle","e","this","autostart","className","onClick","style","width","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAsDeA,G,wDAlDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,WAAa,WACX,EAAKC,QAAUC,aAAY,WACzB,EAAKC,SAAS,CACZC,KAAM,EAAKC,MAAMD,KAAO,EAAKL,MAAMO,KACnCC,aACI,EAAKF,MAAMD,KAAO,EAAKL,MAAMO,MAAQ,EAAKP,MAAMK,KAAQ,MAE1D,EAAKC,MAAMD,MAAQ,GACrBI,cAAc,EAAKP,WAEpB,EAAKF,MAAMO,MACd,EAAKH,SAAS,CAAEM,OAAQ,UAzBP,EA4BnBC,UAAY,WACV,EAAKP,SAAS,CAAEM,OAAQ,UACxBD,cAAc,EAAKP,UA9BF,EAgCnBU,gBAAkB,SAACC,GACK,UAAtB,EAAKP,MAAMI,OACP,EAAKT,WAAW,EAAKK,MAAMD,KAAM,EAAKL,MAAMO,MAC5C,EAAKI,aAjCT,EAAKL,MAAQ,CACXD,KAAML,EAAMK,KACZK,OAAQ,QACRF,YAAa,KALE,E,gEASbM,KAAKd,MAAMe,WACbD,KAAKb,e,+BA4BP,OACE,sBAAKe,UAAU,QAAf,UACE,wBAAQC,QAASH,KAAKF,gBAAtB,SAAwCE,KAAKR,MAAMI,SACnD,qBACEM,UAAU,MACVE,MAAO,CAAEC,MAAOL,KAAKR,MAAME,YAAc,c,GA5C/BY,IAAMC,YCUXC,EATH,WACV,OACE,sBAAKN,UAAU,MAAf,UACE,cAAC,EAAD,CAAOX,KAAM,IAAME,KAAM,IAAMQ,WAAW,IAC1C,cAAC,EAAD,CAAOV,KAAM,IAAOE,KAAM,UCIjBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.457312de.chunk.js","sourcesContent":["import React from 'react';\r\nimport './timer.scss';\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: props.time,\r\n      button: 'Start',\r\n      progressBar: 100,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (this.props.autostart) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.timerID = setInterval(() => {\r\n      this.setState({\r\n        time: this.state.time - this.props.step,\r\n        progressBar:\r\n          ((this.state.time - this.props.step) / this.props.time) * 100,\r\n      });\r\n      if (this.state.time <= 0) {\r\n        clearInterval(this.timerID);\r\n      }\r\n    }, this.props.step);\r\n    this.setState({ button: 'Stop' });\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ button: 'Start' });\r\n    clearInterval(this.timerID);\r\n  };\r\n  startStopToggle = (e) => {\r\n    this.state.button === 'Start'\r\n      ? this.startTimer(this.state.time, this.props.step)\r\n      : this.stopTimer();\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"timer\">\r\n        <button onClick={this.startStopToggle}>{this.state.button}</button>\r\n        <div\r\n          className=\"bar\"\r\n          style={{ width: this.state.progressBar + '%' }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import './App.scss';\n\nimport Timer from './components/Timer'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Timer time={5000} step={1000} autostart={true}/>\n      <Timer time={10000} step={200} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}